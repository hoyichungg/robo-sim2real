初版規劃（強化版）

目標（v0）
	•	建立一個「同一套控制邏輯可在模擬與**實機（Raspberry Pi/Linux）**切換」的骨架。
	•	提供安全基礎（簡單 fail-safe：距離過近停車）。
	•	完整文件與自動化（README、測試、CI）。
	•	（新增） 時間來源抽象（Clock），保證步進一致性並可量測抖動。
	•	（新增） 遙測/紀錄（Telemetry），可重播與比對運行結果。
	•	（新增） 參數化設定（TOML/JSON）：PID、門檻、輪徑/輪距、加減速度上限。

範圍（Scope）
	1.	差速小車 2D 模擬：Bevy + Rapier2D，鍵盤/固定速度命令。
	2.	抽象硬體介面（traits）：Motor、DistanceSensor、Clock、Logger/Telemetry。
	3.	基本控制器：單一前進速度 PID（先不做轉向/路徑規劃）。
	4.	Fail-safe：超音波距離 < 門檻 → 立即停車、記錄 log。
	5.	實機介面雛形（Linux SBC）：Raspberry Pi 版的驅動 stub（接口有、回傳假值），確保可編譯與切換。
	6.	CI：lint + unit test，外加 aarch64 交叉編譯（產 artifact）。
	7.	（新增） 限幅/濾波模組：RateLimiter、LowPassFilter（供 PID 輸入/輸出使用）。
	8.	（新增） 運動學封裝 DifferentialKinematics（m/s, rad/s ⇄ 左右輪速）。
	9.	（新增） 事件匯流（同步 EventBus）：進/出 fail-safe、感測異常。

不在範圍（Non-goals）
	•	SLAM / 地圖 / 多車協同。
	•	相機/雷射高階感測。
	•	MCU（no_std）實裝（先留骨架）。
	•	車規安全完整流程（ISO 26262/21434 僅列出清單，v0 不導入流程/工具）。

交付物（Deliverables）
	•	Workspace 專案骨架（core/、drivers/、sim2d/、platform_rpi/）。
	•	最小控制 loop：tick(desired_speed, dt)。
	•	模擬可執行檔：可視化出一台車，按下啟動後向前移動，遇到障礙物「虛擬距離 < 門檻」即停止。
	•	CI 成果：PR 自動跑 clippy、test、aarch64 build。
	•	README：一鍵跑模擬、切換驅動、交叉編譯到 RPi。
	•	（新增） Deterministic replay（以遙測檔重播相同輸入，產生一致終態）。

成功準則（Acceptance Criteria）
	•	在本機：cargo run -p sim2d 能看到小車前進，距離過近時停止，終端輸出警告。
	•	切換到 RPi 平台 crate：cargo build -p platform_rpi --target aarch64-unknown-linux-gnu 產出成功（即使驅動回傳假值）。
	•	單元測試：PID / fail-safe / 限幅/濾波 / 運動學轉換通過（行為覆蓋 ≥90% 的關鍵分支）。
	•	CI 通過（lint、test、aarch64 build 產出 artifact）。
	•	（新增） 重播測試：相同輸入序列（含 seed）→ 相同終端輸出與終態位置（允許極小浮點誤差）。

系統概念圖（文字版）
	•	core（平台無關）：控制器 + traits（Motor/DistanceSensor/Clock/Telemetry）+ 運動學 + 限幅/濾波。
	•	drivers：*_mock（模擬用）、*_rpi（實機 stub）。
	•	sim2d：把模擬世界封裝成 drivers::mock，餵給 core。
	•	platform_rpi：把 RPi 驅動（stub）餵給 core。
	•	控制邏輯不動，只換「drivers」。

專案結構（建議）

/core
  /control      # PID, 限幅, 濾波, 狀態機（RUN/EMERGENCY_BRAKE/SAFE_STOP）
  /hal          # traits: Motor, DistanceSensor, Clock, Telemetry
  /model        # DifferentialKinematics, Units, Command, State
  /replay       # Recorder/Player（CSV/JSON）
/drivers
  /mock         # 模擬感測/馬達
  /rpi          # rppal stub（GPIO/PWM/I2C TODO）與錯誤型別
/sim2d          # Bevy + Rapier2D（支援 --headless 步進模式）
/platform_rpi   # RPi 主程式（讀 config 建立實機 runtime）
/configs        # 預設 config（sim/default.toml, rpi/default.toml）
/tests          # property-based 與整合測試

最小技術選型
	•	語言：Rust stable。
	•	模擬：Bevy、Rapier2D（僅 2D），支援 --headless。
	•	驅動：rppal（之後接 GPIO/PWM/I2C），v0 先留接口與 TODO。
	•	測試：cargo test（core 層重點，外加 property-based）。
	•	CI：GitHub Actions（clippy + test + cross aarch64 + artifact）。

API（v0 決策的接口，已強化錯誤處理）

// 指令（v0 先用前進速度；預留角速度/制動）
pub struct Command {
    pub linear_mps: f32,      // v0 使用
    pub angular_rps: f32,     // v1 預留
    pub brake: bool,          // 預留
}

// 馬達
pub trait Motor {
    fn set_wheel_speeds(&mut self, left_mps: f32, right_mps: f32) -> Result<(), MotorError>;
}

// 距離感測
pub trait DistanceSensor {
    fn distance_m(&mut self) -> Result<f32, SensorError>;
}

// 時鐘（模擬可固定步進，實機讀系統時間）
pub trait Clock {
    fn now_s(&self) -> f64;
    fn sleep_ms(&self, ms: u64);
}

// 遙測（可 CSV/Stdout 實作，供重播/分析）
pub trait Telemetry {
    fn record(&mut self, ts_s: f64, key: &str, value: &str);
}

// 運動學（封裝差速換算）
pub struct DifferentialKinematics { pub wheel_base_m: f32 }
impl DifferentialKinematics {
    pub fn to_wheel_speeds(&self, v_mps: f32, w_rps: f32) -> (f32, f32) { /* ... */ }
}

// 控制器（內含 PID、限幅/濾波、狀態機/Fail-safe）
pub trait Controller {
    fn tick(&mut self, cmd: Command, dt_s: f32) -> (f32, f32); // 回傳左右輪速度目標
}

狀態機（Fail-safe）
	•	RUN → EMERGENCY_BRAKE（距離 < 門檻或感測錯誤/NaN/Timeout）。
	•	EMERGENCY_BRAKE → SAFE_STOP（速度降為 0 並維持）。
	•	解除條件（v0 可不自動解除，避免抖動）：人工/按鍵/指令 reset。
	•	事件：fail_safe_entered、fail_safe_exited 由 EventBus 廣播並寫入 Telemetry。

設定檔（TOML 範例）

# configs/sim/default.toml
[robot]
wheel_base_m = 0.22
wheel_radius_m = 0.03
max_linear_mps = 0.6
max_accel_mps2 = 0.8

[control.pid]
kp = 0.8
ki = 0.0
kd = 0.05

[control.filters]
velocity_lowpass_alpha = 0.2
command_rate_limit_mps2 = 0.8

[safety]
distance_threshold_m = 0.25

[sim]
fixed_dt_s = 0.0167

測試策略
	•	單元測試：PID 收斂、限幅不超界、濾波穩定、運動學正逆轉換一致性。
	•	性質測試（property-based）：感測雜訊/尖峰值下系統不發散。
	•	失效注入：DistanceSensor 回傳 Err/NaN → 必須進入 fail-safe。
	•	重播測試：錄製 10 秒命令序列 → 重播結果一致。

風險與緩解
	•	模擬/實機差距：以 traits 抽象 + SI 單位固定；文件列清單。
	•	時間抖動/取樣率：Clock 統一；模擬固定 dt；實機紀錄「期望 vs 實際」入 Telemetry。
	•	安全性：最小 fail-safe 已實作；列「故障模式與反應」於 docs/safety.md。

v0 里程碑（兩週內可完成）
	1.	D1–D2：Workspace + traits + PID + 限幅/濾波 + 單元/性質測試。
	2.	D3–D5：Bevy 場景 + Rapier 剛體 + mock 驅動 + fail-safe + Telemetry。
	3.	D6–D7：platform_rpi crate（stub 實作）+ aarch64 build 通過。
	4.	D8：CI 工作流（clippy、test、cross、artifact、可選 headless sim）。
	5.	D9–D10：README、設計說明、troubleshooting、重播教學。

v0 文檔清單
	•	README.md：快速開始、模擬、交叉編譯、切換平台、重播。
	•	docs/arch.md：模組關係、資料流、單位規範、事件/遙測。
	•	docs/safety.md：v0 fail-safe 規則、故障模式與反應、ISO 26262/21434 對照清單（待辦）。
